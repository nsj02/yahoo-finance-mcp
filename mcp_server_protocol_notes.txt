# Yahoo Finance MCP Server Interaction Guide

This document provides instructions for setting up and interacting with the `server.py` MCP server. The key takeaway is that the server uses a specific JSON-RPC protocol over stdio and requires a proper initialization handshake before accepting tool calls.

## 1. Setup (One-time)

The project uses `uv` for dependency management.

- **Install dependencies:**
  ```bash
  uv sync
  ```

## 2. Running the Server

The server is run directly as a Python script. It will listen for JSON-RPC requests on standard input.

```bash
python server.py
```

## 3. Communication Protocol

Interaction requires a specific sequence of JSON-RPC messages.

### Step 1: Initialization Request (Mandatory)

Before any other command, an `initialize` request must be sent.

- **Method:** `initialize`
- **Key Parameters:** The `clientInfo` object in the parameters **must** include both a `name` and a `version`.

**Correct `initialize` request format:**
```json
{"jsonrpc": "2.0", "method": "initialize", "params": {"protocolVersion": "1.0", "capabilities": {}, "clientInfo": {"name": "gemini-cli", "version": "0.0.1"}}, "id": 0}
```

### Step 2: Tool Call Request

After a successful initialization, the server accepts `tools/call` requests.

- **Method:** `tools/call`
- **Parameters:**
    - `name`: The name of the tool to execute (e.g., `get_stock_info`).
    - `arguments`: A JSON object containing the parameters for the tool (e.g., `{"ticker": "AAPL"}`).

**Correct `tools/call` request format:**
```json
{"jsonrpc": "2.0", "method": "tools/call", "params": {"name": "get_stock_info", "arguments": {"ticker": "AAPL"}}, "id": 1}
```

## 4. Manual Testing Command

To verify the server is running and the request formats are correct, the following command can be used. It sends an `initialize` request followed by a `tools/call` request.

**Note:** This command will show a successful response for the `initialize` request, but the `tools/call` request will likely fail with a "request before initialization was complete" error. This is because a simple pipe doesn't handle the required stateful, back-and-forth handshake. However, it successfully confirms that the `initialize` request format is correct and the server is responsive.

```bash
printf '%s\n' \
  '{"jsonrpc": "2.0", "method": "initialize", "params": {"protocolVersion": "1.0", "capabilities": {}, "clientInfo": {"name": "gemini-cli", "version": "0.0.1"}}, "id": 0}' \
  '{"jsonrpc": "2.0", "method": "tools/call", "params": {"name": "get_stock_info", "arguments": {"ticker": "AAPL"}}, "id": 1}' \
| python server.py
```

```